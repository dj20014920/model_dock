import { requestHostPermission } from '~app/utils/permissions'
import { hybridFetch } from '~app/utils/hybrid-requester'
import { ChatError, ErrorCode } from '~utils/errors'
import { AbstractBot, SendMessageParams } from '../abstract-bot'

interface ConversationContext {
  conversationId: string
  clientId?: string
  isNewUser: boolean
  remainingTurns: number
}

/**
 * CopilotWebBot - WebSocket Intercept Î∞©Ïãù
 *
 * Content ScriptÎ•º ÌÜµÌïú WebSocket Ïó∞Í≤∞:
 * 1. copilot.microsoft.com ÌÉ≠ Ï∞æÍ∏∞/ÏÉùÏÑ±
 * 2. Content scriptÍ∞Ä ÌéòÏù¥ÏßÄ ÎÇ¥ÏóêÏÑú WebSocket ÏÉùÏÑ± (Same-Origin)
 * 3. Message passingÏúºÎ°ú ExtensionÍ≥º ÌÜµÏã†
 *
 * Message Flow:
 * Extension ‚Üí chrome.tabs.sendMessage ‚Üí Bridge ‚Üí window.postMessage ‚Üí Interceptor ‚Üí WebSocket
 * WebSocket ‚Üí Interceptor ‚Üí window.postMessage ‚Üí Bridge ‚Üí chrome.runtime.sendMessage ‚Üí Extension
 */
export class CopilotWebBot extends AbstractBot {
  private conversationContext?: ConversationContext
  private messageListener?: (message: any, sender: any, sendResponse: any) => boolean | undefined
  private currentTabId?: number

  async doSendMessage(params: SendMessageParams) {
    if (!(await requestHostPermission('https://copilot.microsoft.com/*'))) {
      throw new ChatError('Missing copilot.microsoft.com permission', ErrorCode.MISSING_HOST_PERMISSION)
    }

    try {
      // 1. Conversation ÏÉùÏÑ± (HTTP API)
      if (!this.conversationContext) {
        this.conversationContext = await this.createConversation()
      }

      // 2. copilot.microsoft.com ÌÉ≠ Ï∞æÍ∏∞/ÏÉùÏÑ±
      const tabId = await this.findOrCreateCopilotTab()
      this.currentTabId = tabId

      // 3. Message passingÏúºÎ°ú WebSocket ÌÜµÏã†
      await this.sendMessageViaContentScript(params, tabId)
    } catch (error) {
      console.error('[Copilot] Error:', error)
      params.onEvent({
        type: 'ERROR',
        error:
          error instanceof ChatError
            ? error
            : new ChatError(error instanceof Error ? error.message : 'Unknown error', ErrorCode.UNKOWN_ERROR),
      })
    }
  }

  private async createConversation(): Promise<ConversationContext> {
    console.log('[Copilot] üöÄ Creating conversation via /c/api/start')

    const response = await hybridFetch(
      'https://copilot.microsoft.com/c/api/start',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          accept: '*/*',
        },
        body: JSON.stringify({
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone || 'Asia/Seoul',
          startNewConversation: true,
          teenSupportEnabled: true,
          correctPersonalizationSetting: true,
          performUserMerge: true,
          deferredDataUseCapable: true,
        }),
      },
      { homeUrl: 'https://copilot.microsoft.com', hostStartsWith: 'https://copilot.microsoft.com' },
      { reuseOnly: false }
    )

    if (!response.ok) {
      throw new ChatError(
        `Failed to create conversation: ${response.status} ${response.statusText}`,
        ErrorCode.NETWORK_ERROR
      )
    }

    const data = await response.json()
    console.log('[Copilot] ‚úÖ Conversation created:', data.currentConversationId)

    return {
      conversationId: data.currentConversationId,
      clientId: data.clientId,
      isNewUser: data.isNewUser || false,
      remainingTurns: data.remainingTurns || 1000,
    }
  }

  private async findOrCreateCopilotTab(): Promise<number> {
    console.log('[Copilot] üîç Looking for copilot.microsoft.com tab...')

    // Í∏∞Ï°¥ ÌÉ≠ Ï∞æÍ∏∞
    const tabs = await chrome.tabs.query({
      url: 'https://copilot.microsoft.com/*',
    })

    if (tabs.length > 0 && tabs[0].id) {
      console.log('[Copilot] ‚úÖ Found existing tab:', tabs[0].id)
      // 2-1) Try reinjection; if receiving end not ready, reload to guarantee injection at document_start
      let reinjected = false
      try {
        await chrome.tabs.sendMessage(tabs[0].id, { type: 'COPILOT_INJECT' })
        reinjected = true
      } catch (e) {
        console.debug('[Copilot] Reinjection message failed (content script not ready):', (e as Error)?.message)
      }
      if (!reinjected) {
        console.log('[Copilot] ‚ôªÔ∏è Reloading Copilot tab to ensure early injection')
        try { await chrome.tabs.reload(tabs[0].id) } catch {}
        await new Promise((r) => setTimeout(r, 2000))
      }
      return tabs[0].id
    }

    // ÏÉà ÌÉ≠ ÏÉùÏÑ± (Î∞±Í∑∏ÎùºÏö¥Îìú)
    console.log('[Copilot] üìù Creating new background tab...')
    const newTab = await chrome.tabs.create({
      url: 'https://copilot.microsoft.com',
      active: false, // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏÉùÏÑ±
    })

    if (!newTab.id) {
      throw new ChatError('Failed to create Copilot tab', ErrorCode.UNKOWN_ERROR)
    }

    // Content scriptÍ∞Ä Î°úÎìúÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
    await new Promise((resolve) => setTimeout(resolve, 2000))

    console.log('[Copilot] ‚úÖ Created new tab:', newTab.id)
    return newTab.id
  }

  private async sendMessageViaContentScript(params: SendMessageParams, tabId: number) {
    const { conversationId } = this.conversationContext!

    console.log('[Copilot] üì§ Sending message via content script...')

    let fullText = ''

    // Message listener ÏÑ§Ï†ï
    this.messageListener = (message: any): boolean | undefined => {
      if (message.type === 'FROM_COPILOT_PAGE') {
        const data = message.data

        switch (data.type) {
          case 'COPILOT_WS_OPEN':
            console.log('[Copilot] ‚úÖ WebSocket connected')
            // WebSocket Ïó∞Í≤∞ ÌõÑ Î©îÏãúÏßÄ Ï†ÑÏÜ°
            chrome.tabs.sendMessage(tabId, {
              type: 'TO_COPILOT_PAGE',
              data: {
                event: 'send',
                conversationId,
                content: [{ type: 'text', text: params.prompt }],
                mode: 'chat',
                context: {},
              },
            })
            break

          case 'COPILOT_WS_MESSAGE':
            try {
              const event = typeof data.data === 'string' ? JSON.parse(data.data) : data.data

              console.debug('[Copilot] üì• WS Event:', event.event)

              switch (event.event) {
                case 'received':
                  console.log('[Copilot] üì® Message received')
                  break

                case 'update':
                  if (event.content) {
                    fullText = event.content
                    params.onEvent({
                      type: 'UPDATE_ANSWER',
                      data: { text: fullText },
                    })
                  }
                  break

                case 'appendContent':
                  if (event.text) {
                    fullText += event.text
                    params.onEvent({
                      type: 'UPDATE_ANSWER',
                      data: { text: fullText },
                    })
                  }
                  break

                case 'done':
                case 'completed':
                  console.log('[Copilot] ‚úÖ Message completed')
                  params.onEvent({ type: 'DONE' })
                  this.cleanup()
                  break

                case 'error':
                  console.error('[Copilot] ‚ùå Error event:', event)
                  params.onEvent({
                    type: 'ERROR',
                    error: new ChatError(event.message || 'WebSocket error', ErrorCode.NETWORK_ERROR),
                  })
                  this.cleanup()
                  break
              }
            } catch (e) {
              console.error('[Copilot] Failed to parse message:', e)
            }
            break

          case 'COPILOT_WS_ERROR':
            console.error('[Copilot] WebSocket error:', data.error)
            params.onEvent({
              type: 'ERROR',
              error: new ChatError(data.error || 'WebSocket error', ErrorCode.NETWORK_ERROR),
            })
            this.cleanup()
            break

          case 'COPILOT_WS_CLOSE':
            console.log('[Copilot] WebSocket closed:', data.code, data.reason)
            this.cleanup()
            break
        }
        return true // Message handled
      }
      return undefined
    }

    chrome.runtime.onMessage.addListener(this.messageListener)

    // Ensure WS connection is created from page context (explicit connect)
    try {
      await chrome.tabs.sendMessage(tabId, {
        type: 'TO_COPILOT_PAGE',
        data: { event: 'connect' },
      })
    } catch (e) {
      console.debug('[Copilot] Connect request failed (will rely on page auto-connect):', (e as Error)?.message)
    }

    // Content scriptÏóê WebSocket Ïó∞Í≤∞ Ìä∏Î¶¨Í±∞
    // copilot.microsoft.com ÌéòÏù¥ÏßÄÍ∞Ä Î°úÎìúÎêòÎ©¥ ÏûêÎèôÏúºÎ°ú WebSocketÏùÑ ÏÉùÏÑ±ÌïòÎØÄÎ°ú
    // Ïö∞Î¶¨Îäî Í∏∞Îã§Î¶¨Í∏∞Îßå ÌïòÎ©¥ Îê®. ÌïòÏßÄÎßå Î™ÖÏãúÏ†ÅÏúºÎ°ú ÌéòÏù¥ÏßÄÎ•º Î¶¨Î°úÎìúÌïòÍ±∞ÎÇò
    // ÌéòÏù¥ÏßÄÍ∞Ä Ïù¥ÎØ∏ Î°úÎìúÎêòÏñ¥ ÏûàÎäî Í≤ΩÏö∞Î•º ÏúÑÌï¥ ÎçîÎØ∏ Î©îÏãúÏßÄÎ•º Î≥¥ÎÇº ÏàòÎèÑ ÏûàÏùå

    // Abort signal Ï≤òÎ¶¨
    if (params.signal) {
      params.signal.addEventListener('abort', () => {
        console.log('[Copilot] üõë Request aborted')
        this.cleanup()
      })
    }
  }

  private cleanup() {
    if (this.messageListener) {
      chrome.runtime.onMessage.removeListener(this.messageListener)
      this.messageListener = undefined
    }
  }

  resetConversation() {
    this.cleanup()
    this.conversationContext = undefined
    this.currentTabId = undefined
    console.log('[Copilot] üîÑ Conversation reset')
  }

  get name() {
    return 'Copilot (webapp)'
  }
}
